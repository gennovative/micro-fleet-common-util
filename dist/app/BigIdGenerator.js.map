{"version":3,"sources":["app/BigIdGenerator.ts"],"names":[],"mappings":";;AAAA,uCAAuC;AACvC,+CAAuC;AAoCvC;;GAEG;AACH;IAIC,YAAY,OAAsB;QACjC,IAAI,CAAC,UAAU,GAAG,IAAI,OAAO,CAAC,OAAO,CAAC,CAAC;IACxC,CAAC;IAED;;OAEG;IACI,IAAI;QACV,MAAM,CAAC,IAAI,sBAAO,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC,CAAC;IAC5C,CAAC;IAOD;;;OAGG;IACI,IAAI;QACV,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC;YACvB,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC;QACpB,CAAC;QACD,sCAAsC;QACtC,MAAM,CAAC,sBAAO,CAAC,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;IACvC,CAAC;CACD;AA/BD,wCA+BC","file":"BigIdGenerator.js","sourcesContent":["import * as FlakeId from 'flake-idgen';\r\nimport { Int64BE } from 'int64-buffer';\r\n\r\nexport type BigIdOptions = {\r\n\t\r\n\t/**\r\n\t * Datacenter identifier. It can have values from 0 to 31 (5 bits).\r\n\t */\r\n\tdatacenter?: number,\r\n\t\r\n\t/**\r\n\t * Worker identifier. It can have values from 0 to 31 (5 bits).\r\n\t */\r\n\tworker?: number,\r\n\r\n\t/**\r\n\t * Generator identifier. It can have values from 0 to 1023 (10 bits).\r\n\t * It can be provided instead of `datacenter` and `worker` identifiers.\r\n\t */\r\n\tid?: number,\r\n\r\n\t/**\r\n\t * Number used to reduce value of a generated timestamp. \r\n\t * Note that this number should not exceed number of milliseconds elapsed\r\n\t * since 1 January 1970 00:00:00 UTC (value of `Date.now()`).\r\n\t * It can be used to generate smaller ids.\r\n\t */\r\n\tepoch?: number,\r\n};\r\n\r\nexport type Int64 = {\r\n\ttoNumber(): number,\r\n\ttoJSON(): number,\r\n\ttoString(radix?: number): string,\r\n\ttoBuffer(raw?: boolean): Buffer,\r\n};\r\n\r\n/**\r\n * Provides methods to generate bigint ID\r\n */\r\nexport class BigIdGenerator {\r\n\r\n\tprivate _generator: FlakeId;\r\n\r\n\tconstructor(options?: BigIdOptions) {\r\n\t\tthis._generator = new FlakeId(options);\r\n\t}\r\n\r\n\t/**\r\n\t * Generates a new ID.\r\n\t */\r\n\tpublic next(): Int64 {\r\n\t\treturn new Int64BE(this._generator.next());\r\n\t}\r\n\r\n\tpublic wrap(value: string, radix?: number): Int64;\r\n\tpublic wrap(buf: Buffer): Int64;\r\n\tpublic wrap(value?: number): Int64;\r\n\r\n\t\r\n\t/**\r\n\t * Parses input value into bigint type.\r\n\t * @param value The value to be wrapped. If not given, the behavior is same with `next()`.\r\n\t */\r\n\tpublic wrap(): Int64 {\r\n\t\tif (!arguments.length) {\r\n\t\t\treturn this.next();\r\n\t\t}\r\n\t\t// Equivalent with `new Int64BE(....)`\r\n\t\treturn Int64BE.apply(null, arguments);\r\n\t}\r\n}"]}