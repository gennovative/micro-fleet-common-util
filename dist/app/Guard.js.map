{"version":3,"sources":["app/Guard.ts"],"names":[],"mappings":";;AAAA,4BAA4B;AAC5B,mCAAmC;AAEnC;IACC,0BAA0B;IAE1B;;;;;;OAMG;IACI,MAAM,CAAC,aAAa,CAAC,IAAY,EAAE,MAAW,EAAE,OAAgB;QACtE,EAAE,CAAC,CAAC,MAAM,KAAK,IAAI,IAAI,MAAM,KAAK,SAAS,CAAC,CAAC,CAAC;YAC7C,MAAM,IAAI,EAAE,CAAC,wBAAwB,CAAC,IAAI,EAAE,OAAO,IAAI,gCAAgC,CAAC,CAAC;QAC1F,CAAC;IACF,CAAC;IAED;;;;;;;;OAQG;IACI,MAAM,CAAC,cAAc,CAAC,IAAY,EAAE,MAAW,EAAE,OAAgB;QACvE,EAAE,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YACvB,MAAM,IAAI,EAAE,CAAC,wBAAwB,CAAC,IAAI,EAAE,OAAO,IAAI,uCAAuC,CAAC,CAAC;QACjG,CAAC;IACF,CAAC;IAED;;;;;;OAMG;IACI,MAAM,CAAC,gBAAgB,CAAC,IAAY,EAAE,MAAW,EAAE,OAAgB;QACzE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YAC3B,MAAM,IAAI,EAAE,CAAC,wBAAwB,CAAC,IAAI,EAAE,OAAO,IAAI,qBAAqB,CAAC,CAAC;QAC/E,CAAC;IACF,CAAC;IAED;;;;;;OAMG;IACI,MAAM,CAAC,aAAa,CAAC,IAAY,EAAE,IAAY,EAAE,MAAc,EAAE,OAAgB;QACvF,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YACxB,MAAM,IAAI,EAAE,CAAC,wBAAwB,CAAC,IAAI,EAAE,OAAO,IAAI,gCAAgC,CAAC,CAAC;QAC1F,CAAC;IACF,CAAC;IAED;;;;;;;OAOG;IACI,MAAM,CAAC,cAAc,CAAC,MAAW,EAAE,OAAe,EAAE,aAAsB,IAAI;QACpF,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;YACb,EAAE,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;gBAChB,MAAM,IAAI,EAAE,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC;YACzC,CAAC;YAAC,IAAI,CAAC,CAAC;gBACP,MAAM,IAAI,EAAE,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;YACtC,CAAC;QACF,CAAC;IACF,CAAC;IAED;;;;;OAKG;IACI,MAAM,CAAC,cAAc,CAAC,MAAW,EAAE,OAAe,EAAE,aAAsB,IAAI;QACpF,KAAK,CAAC,cAAc,CAAC,CAAC,MAAM,EAAE,OAAO,EAAE,UAAU,CAAC,CAAC;IACpD,CAAC;CAED;AArFD,sBAqFC","file":"Guard.js","sourcesContent":["import * as _ from 'lodash';\r\nimport * as ex from './Exceptions';\r\n\r\nexport class Guard {\r\n\t//private constructor() {}\r\n\r\n\t/**\r\n\t * Makes sure the specified `target` is not null or undefined.\r\n\t * @param name {string} Name to include in error message if assertion fails.\r\n\t * @param target {any} Argument to check.\r\n\t * @param message {string} Optional error message.\r\n\t * @throws {InvalidArgumentException} If assertion fails.\r\n\t */\r\n\tpublic static assertDefined(name: string, target: any, message?: string): void {\r\n\t\tif (target === null || target === undefined) {\r\n\t\t\tthrow new ex.InvalidArgumentException(name, message || 'Must not be null or undefined!');\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Makes sure the specified `target` is an object, array, or string which is not null or undefined.\r\n\t * If `target` is a string or array, it must have `length` greater than 0,\r\n\t * If it is an object, it must have at least one property.\r\n\t * @param name {string} Name to include in error message if assertion fails.\r\n\t * @param target {any} Argument to check.\r\n\t * @param message {string} Optional error message.\r\n\t * @throws {InvalidArgumentException} If assertion fails.\r\n\t */\r\n\tpublic static assertNotEmpty(name: string, target: any, message?: string): void {\r\n\t\tif (_.isEmpty(target)) {\r\n\t\t\tthrow new ex.InvalidArgumentException(name, message || 'Must not be null, undefined or empty!');\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Makes sure the specified `target` is a function.\r\n\t * @param name {string} Name to include in error message if assertion fails.\r\n\t * @param target {any} Argument to check.\r\n\t * @param message {string} Optional error message.\r\n\t * @throws {InvalidArgumentException} If assertion fails.\r\n\t */\r\n\tpublic static assertIsFunction(name: string, target: any, message?: string): void {\r\n\t\tif (!_.isFunction(target)) {\r\n\t\t\tthrow new ex.InvalidArgumentException(name, message || 'Must be a function!');\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Makes sure the specified `target` matches Regular Expression `rule`.\r\n\t * @param name {string} Name to include in error message if assertion fails.\r\n\t * @param target {any} Argument to check.\r\n\t * @param message {string} Optional error message.\r\n\t * @throws {InvalidArgumentException} If assertion fails.\r\n\t */\r\n\tpublic static assertIsMatch(name: string, rule: RegExp, target: string, message?: string): void {\r\n\t\tif (!rule.test(target)) {\r\n\t\t\tthrow new ex.InvalidArgumentException(name, message || 'Does not match specified rule!');\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Makes sure the specified `target` is considered \"truthy\" based on JavaScript rule.\r\n\t * @param target {any} Argument to check.\r\n\t * @param message {string} Error message.\r\n\t * @param isCritical {boolean} If true, throws CriticalException. Otherwise, throws MinorException when assertion fails.\r\n\t * @throws {CriticalException} If assertion fails and `isCritical` is true.\r\n\t * @throws {MinorException} If assertion fails and `isCritical` is false.\r\n\t */\r\n\tpublic static assertIsTruthy(target: any, message: string, isCritical: boolean = true): void {\r\n\t\tif (!target) {\r\n\t\t\tif (isCritical) {\r\n\t\t\t\tthrow new ex.CriticalException(message);\r\n\t\t\t} else {\r\n\t\t\t\tthrow new ex.MinorException(message);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Makes sure the specified `target` is considered \"falsey\" based on JavaScript rule.\r\n\t * @param target {any} Argument to check.\r\n\t * @param message {string} Error message.\r\n\t * @throws {InvalidArgumentException} If assertion fails.\r\n\t */\r\n\tpublic static assertIsFalsey(target: any, message: string, isCritical: boolean = true): void {\r\n\t\tGuard.assertIsTruthy(!target, message, isCritical);\r\n\t}\r\n\r\n}"]}